[web]
192.168.1.9
192.168.1.2

[apps]
server1.nehraclasses.local
server2.nehraclasses.local

[weblogic]
server[1:20].mgt.worldpaypp.local

[ohs]
192.168.1.[1:5]

[groups:children]
web
ohs

ansible web --list-hosts -i ~/inventory/ansible_hostfile_example			--> /etc/hosts	: defualt host file used in ansible

vi /etc/ansible/ansible.cfg
[defaults]					--> to make custome inventory file as default
inventory = /home/shantayya/inventory
remote_user = ansible
ask_pass = false
gathering = explicit			--> dont gather the facts. define globally

[privilege_escalation]
become = True
become_method = sudo
become_user = root				--> optional. bcz default become user is root only
become_ask_pass = false

Connection with managed nodes:
1. with password

use -k option to promt for password:
ansible web -m ping -k				--> even after using -k,if commands fails ssh then use hosts_key_checking = false in ansible.cfg file. 

	
2. passwordless
3. define password in inventory
[web]
192.168.1.9	ansible_ssh_user=ansible	ansible_ssh_pass=redhat
192.168.1.2	ansible_ssh_user=jenkins	ansible_ssh_pass=fedora

or
[web:vars]			--> use below username and pass for web group
ansible_ssh_user=ansible
ansible_ssh_pass=redhat	

ad-hoc commands	: used for automating one time jobs
playbooks	: used for repeatative jobs

--------ad-hoc commands----
ansible groupname -m modulename -a "arguments i.e key =  value"

ansiblee-doc -l			--> shows list of ansible modules
ansible-doc modulename		--> to see module details for how to use it.
ansible web -m copy -a "src= dest="						--copy module. use -b(automaticaly takes root user) --become-method sudo remote_src=yes -> to copy fie from one loc to other in remote machine.
										backup= yes --> to backup before copy
Note: yellow color - action performed	green color-idempotency. task already performed in previous executions.  red color- error

ansible web -m command -a "uptime"				--> command module only works if python2.4 or above present in machine + it cannot execute multiple commands
ansible web -m raw -a "uptime;lablk"				--> raw module is used to execute low level commands. can be used as an option to command module.
ansible web -m shell -a "/root/script.sh"			--> shell module used to execute scripts in remote machine.

ansible web -m lineinfile -a 'dest=/root/hello.txt line="Thanks" insertafter=BOF/EOF/specific word from line state=absent'	--> lineinfile used to append content in file
ansible web -m lineinfile -a 'dest=/root/hello.txt regexp=^This state=absent'		--> used to remove line starting with This

ansible web -m	replace -a 'path=/root/hello.txt regexp=^Hi replace=hello'		--> used to replace word in file
ansible web -m	user -a 'name=amit state=present/absent id=1010 group=wheel(primary)  groups=wheel(secondary)'		--> add user 
ansible web -m	group -a 'name=rehl state=present/absent gid=1010'				--> add group

---yum/dnf --> fedora distributions  apt--> debian package--> globally used for package management ---------
ansible web -m yum/dnf/apt -a 'name=zsh state=present/installed or absent/remove or latest'  
ansible web -m	package -a 'name=zsh state=present/installed or absent/remove or latest use=dnf/yum/apt'

ansible web -m	yum_repository -a 'name=test description="test repo" enabled=1 gpgcheck=0 baseurl=file:///mnt/AppStream'	--> configure local repo. use state=absent if want to remove repo


systemd: used to manage services and timer on remote machines
ansile rhel9 -m systemd -a 'daemon-reload=true name=httpd state=restarted enabled=false masked=true/false'	--> masking service: symlinc moved to /dev/null) means sending servive in un-unsed state permanently until we unmask restarted : shutdown plus start again reload: only reloads its configuraton 

Note: systemctl enable/disable --now httpd	--> start/stop plus enable/disable service at same time. 

debug: used to print messages in system
ansible rhel9 -m debug -a 'msg=Hello Shantayya'

uri: used to validate urls
ansible web -m uri -a 'url=www.google.com'

ansible-galaxy collection install ansible.posix			--> install extra modules
ansible-galaxy collection install community.general		--> install parted ansible module from community collection 

parted: used to perform block device configuraton
ansibe web -m parted -a 'device=/dev/sdb number=1 part_end=10GiB state=present/absent'
		parted -a 'device=/dev/sdb number=2/3/4 part_start=10GiB part_end=15GiB part_type=extended state=present'

filesystem: usd to creat fs on partition
ansible web -m filesystem a 'device=/dev/sdb fstype=xfs'

lvg: used to create,remove volume groups
ansible web -m lvg -a 'pvs=/dev/sdb2 vg=VolGrp state=present'
 		lvg -a 'vg=VolGrp state=absent'

lvol: used to create,remove logical volumes.
ansible web -m lvol -a 'vg=VolGrp lv=LogVol1 size=4G state=present'		--> use +2G to extend volume with 2GB size=100%free to use remaining full space
ansible web -m lvol -a 'vg=VolGrp lv=LogVol1 state=absent force=true'		--> to remove lvm

ansible web -m filesystem -a 'device=/dev/VolGrp/LogVol1 fstype=ext4'		--> format fs

ansible web -m mount -a 'path=/path src=/dev/VolGrp/LogVol1 fstype=ext4 opts=default state=mounted'	--> mount fs. state=mounted makes entry in fstab also

cron: used to schedule cron jobs
ansible web -m cron -a 'name=test weekday=1 user=root min=48 hour=22 job="echo Hello Shantayya>/var/log/messages"'


----variables-----
- hosts: web
  tasks: 
  - name: print message
    debug: 
      msg: "{{ iinvetory_hostname }}"			---> print system defined variable


- hosts: RHEL
  vars: 
    salutations: Hello Everyone				--> user defined variables
  tasks: 
  - name: print user defined variables
    debug: 
      msg: "{{ salutations }}"

 
----ansible variable types---
1. string type: defined in one line. [skills: http]
2. list/array type: 
	var:
	 - http
         - weblogic
         - ansible
3. dictionary type:
	skills:
      	- web: http
          app: weblogic
          middleware: oracle

- name: install httpd and deploy index.html
  hosts: RHEL						
  become: true
  vars: 						or	vars_files:						--> to import var from file
    apache: httpd						    - /home/shantayya/myvars.yaml	
    apache_root: /var/www/html
  tasks:
    - name: install httpd
      yum: 
        name: httpd
        state: installed
    - name: enable httpd service
      service: 
        name: "{{ apache }}"
        state: started
        enabled: true
    - name: create apache root directort "{{ apache }}"
      file:
        name: "{{ apache_root }}"
        state: directory
    - name: copy index.html
      copy:
        content: "Hello, Welcome to Swami and Sons"
        dest: "{{ apache_root }}/index.html"



- name: install linux packages
  hosts: RHEL
  become: true
  vars:
    myvars:
     - ftp
     - httpd
     - vsftpd
  tasks:
   - name: install apckages
     yum:  
      name: "{{ myvars }}"					--> "{{ myvars[2] }}" using array to install vsftpd package only
      state: installed


- name: create users using loop
  become: true
  gather_facts: false						--> dont gather facts. 
  hosts: RHEL
  - name: creatin users
    user: 
      name: "{{ item.name }}"					--> using variables through loop
      shell: /bin/bash|/bin/zsh etc
      home: /path/to/home/dir
      comment: description
      group: set users primary group
      groups: list of groups to add user to 
      append: yes|no						--> set append: no means remove user from all the groups except mentione in groups. 
      uid: "{{ item.uid }}"				
      state: present | absent
      password_lock: yes					--> use this option if wanted user account to be locked
    loop:
      - name: shantayya
        uid: 1020
      - name: Shankar
        uid: 1030
      - name: Somnath
        uid: 1040


- name: promt for user
  hosts: RHEL
  vars_prompt:								--> using vars_prompt to accept user input
     - name: user_name
       prompt: Enter user name:
       private: no
     - name: password
       prompt: Enter password:
       private: yes
  tasks:
     - debug:
        msg:" User name is {{ user_name }} and password is {{ password }}"



----Facts------------
Anible facts are system properties collection by ansible when playooks are executed on remote machine. 
ansible all -m setup 

magic variable: these system defined variables, like hostvars,groups_vars,groups etc

----Vault--------
ansible vault is a feature which allows you to encrypt the sensitive information like passwords or keys
ansible-vault encrypt/edit/view/decrypt sample.yml		--> encrypt existing file
ansible-playbook sample.yml --ask-vault-pass		---> execute yml file using vault password

ansible-playbbook sample.yml --vault-password-file	--> you can put password in separate file(place file at location only known to you.) which can be provided an input for vault password

ansibe-vault create password.yml				---> apply encryption on file while creating it.
pw: redhat

hosts: node2
vars:
  - /home/ansible/password.yml
tasks:
 - name: create user with password
   user:
     name: shantayya
     pass: "{{ pw }}"

ansible-playbook sample.yml --ask-vault-pass		--> provide password of password.yml encrypted file


ansible-vault rekey /home/ansible/password.yml		--> change encrypted file password


----Loop-----
loop,with_items used for executing loop statements in ansible. until keyword used with condition
ansible-doc -t lookup -l	--> shows list of keyworss used in lookup
hosts: RHEL
tasks:
 - name: create user
   user:
     name: "{{ item }}"
     state: present
   with_items/loops:
     - shantayya
     - somnath
     - shankar

--use hashed in loop----
- name: create users using loop
  become: true
  hosts: RHEL
  - name: creatin users
    user: 
      name: "{{ item.name }}"					--> using variables through loop
      groups: "{{ item.groups }}"				
      state: present
    loop:
      - { name: 'shantayya', groups: wheel }
      - { name: 'shankar', groups: root }
      - { name: 'Somnath', groups: rhel }
 

--when: used for condition----
hosts: RHEL
tasks:
 - name: print on redhat machine
   shell: echo "Hello This is redhat machine"
   when: ansible_distribution == 'Redhat
 
 - name: print on ubuntu macine
   shell: echo "Hello this is ubantu machine"
   when: ansible_distribution == 'Ubantu'


hosts: RHEL
tasks:
 - name: execute loop based on condition
   command: echo {{ item }}
   loop: [0,2,4,6,8,10]
   when: item > 5

----Archive-Backup-----------
hosts: all
become: yes
tasks:
  - name: backup dir
    archive: 
      path: 
        - /path/to/file
        - /path/to/dir
        - /globbing/using/path/*
      exlclude_path:
	- file/to/exclude
        - dir/to/exclude
        - glob/to/ex*
      format: gz|tar|xz|zip
      dest: name/of/archive.tgz
  - name: restore the backup
    unarchive:
      src: path/to/tgz
      dest: /path/to/unarchive
      remote_src: yes|no

-------------Process management---------
ansible -m command -a 'pgrep httpd or ps -elf httpd or ps -C httpd'
		      'kill -9 pid'


hosts: all
become: yes
ignore_errors: yes
tasks:
 - name: get process id
   shell: "ps -ef | grep httpd | awk '{print $2}'"
   register: running_processes
 - name: print process id
   debug:
     msg: "{{ running_prrocesses }}"
 - name: kill running processes
   shell: "kill -9 {{ item }}"
   with_items: "{{ running_processes.stdout.lines }}"

-------Permission management------------
ansible -m command -a 'ls -s /etc/redhat-release  /tmp/os-version'

hosts: all
become: yes
tasks:
 - name: create file with permisison
   file: 
     path: /home/shantayya/extra.conf
     state: touch
     mode: u=rw,g=r,o=r						--> use u+rw,g-rw,o-rw	--> to add or remove permisisons on existing file
								--> we can use recurse = yes to update permisisons on directory recursively

 - name: create soft link
   file:
     src: '/etc/redhat-release'
     dest: '/tmp/os-version'
     owner: shantayya
     group: shantayya
     state: link/hard


-----storage management----------
ansible node1 -m shell -a 'sudo lsblk -l'
ansible node1 -m raw -a 'echo -e n\np\n1\n\n\nw' | sudo fdisk /dev/sda
	   command -a 'sudo partprobe /dev/sda'
	   command -a 'lsblk - l'
	   command -a 'mkfs.ext4 /dev/sda1'   or
	   filesystem -a 'dev=/dev/sda1 fstype=ext4 state=present force=true' -b 
           command -a 'mkdir /test'
           command -a 'mount /dev/sda1 /test'
           command -a 'df -hT'
	   lineinfile -a 'path=/etc/fstab line="/dev/sda1 /test ext4 defaults 0 0" state=present' -b   or
	   mount -a 'path=/test  src=/dev/sda1 fstype=ext4 opts=rw state=present/mounted' -b	 --> present state makes entry in fstab but dir will nt be mounted. so we can use mounted instead.
	   command -a 'sudo mount -a'


- name: storage management through ansible
  hosts: node1
  become: yes
  tasks:
   - name: create 1GB partiton on /dev/sda
     parted:
       device: /dev/sda
       number: 1
       state: present						--> /absent/info
       part_end: 1GiB						--> /100%
   - name: create 1GB LVM partition
     parted: 
       device: /dev/sda
       number: 2
       flag: [ lvm/swap ]
       state: present
       part_start: 1GiB				--> use -1GiB to create partition at end of disk
       fs_type: ext4
   - name: create partition using gpt
     parted: 
       label: gpt
       name: p1
       device: /dev/sda
       number: 6
       flag: [ lvm ]
       state: present
       part_start: 0%
       part_end: 10%				--> create partition of size till 10% of disk
       unit: '%'
   - name: format the file system 
     filesystem:
       fstype: ext4
       dev: /dev/sda1/2/3 etc
       force: true
   - name: mount /dev/sda1
     mount:
       path: /test
       src: /dev/sda1
       fstype: ext4
       state: present/mounted/unmounted/absent
       opts: rw
       backup: yes|no					--> backup /etc/fstab file for recovery
          

ansible node1 -m shell -a 'sudo lsblk -l'
ansible node1 -m raw -a 'echo -e n\np\n1\n\n\nw' | sudo fdisk /dev/sda
		 lvg -a 'pvs=/dev/sdaa vg=nehraclasses pesize=32' -b  	--> physical extent default 4MB.
		 lvol -a 'vg=nehraclasses lv=v1 size=1G' -b
                 filesystem -a 'dev=/dev/nehraclasses/lv1 fstype=ext4 state=present force=true' -b 
                 command -a 'mkdir /opt''
                 command -a 'df -hT'
	   	 mount -a 'path=/opt  src=/dev/nehracasses/lv1 fstype=ext4 opts=defaults state=present/mounted' -b	 --> present state akes entry in fstab but dir will nt be mounted. so we can use mounted instead.
	         command -a 'sudo mount -a'

                 lvol -a 'vg=nehraclasses lv=v1 size=+1G resizefs=true' -b 		---> extend lvm

- name: LVM management through ansible
  hosts: node1
  become: yes
  tasks:
   - name: create 1GB LVM partition
     parted: 
       device: /dev/sda
       number: 1
       flag: [ lvm/swap ]
       state: present
       part_start: 1GiB				--> use -1GiB to create partition at end of disk
       fs_type: ext4
   - name: create volume group on /dev/sda1 with physical extent 32 MB
     lvg:
       vg: volGroup
       pvs: /dev/sda1
       pesize: 32M
       state: present
   - name: create thinpool on volume group 
     lvol:								--> shrink: yes|no
       vg: volGroup							    resizefs: yes|no
       thinpool: testpool
       size: 500G
   - name: create lv out of testpool
     lvol:
       vg: volGroup
       lv: lvcache
       thinpool: testpool
       size: 1G					--> use 100%FREE to create lvm of remaining size. or +1G to extend lvm with 1GB or -1G to reduce with 1GB
       opts: --type cache-pool			--> state: absent force=true	for removing lv
       active: false				--> use this option to deactivate lvm



----------Package Management using ansible-----------------------
yum history		--> to see what actions has been taken plus we can undo changes from this history. 
yum history info <number> 		--> shows details info about event 

ansible web -m	yum_repository -a 'name=epel description="EPEL repo" enabled=true gpgcheck=true gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-$releaseever baseurl=file:///mnt/AppStream'	-b --> configure local repo. use state=absent if want to remove repo

- name: Linux patching
  hosts: redhat
  become: yes
  tasks: 
   - name: upgrade all pacages 
     dnf:
      name: '*'
      state: latest
      exclude: kernal*,chrony*				--> patch all packages except kernal,chrony related pckges
     when: ansible_os_family == 'RedHat'
     become: yes
   - name: install Development group packages
     yum: 
      name: '@Development tools'
      state: present
	

-------Future task management using ansible--------
ansible -m shell -a 'echo "Shantayya Swami, you are awesome" | at 22:04' -b		--> comman module does not work with filters
	-m at -a 'command=lsbk count=1 units=minuts' -b					--> units=minutes/hours/days/weeks

ansible -m cron -a 'name=schedule cron job="cat /etc/hosts" minute=04 hour=22 user=shantayya' -b
	   cron -a 'name=start nm job="/home/startNodeManager.sh" special_time=reboot user=orafmw'	

- name: schedule yum update
  hosts: rhel
  become: yes
  tasks:
   - name: yum update using crontab 
     cron: 
      name: "yum update"
      job: "yum update"						--> command
      special_time=reboot|daily|weekly				--> use this only want to execute command after reboot
      minute: "0-59|*|*/2"
      hour: "0-23|*|*/2"
      day: "1-31|*|*/2"
      month: "1-12|*|*/2"
      weekday: "6"
      user: root
      cron_file: filename
      state: absent					--> use state=absent to remove cron job
   - name: schedule post reboot tasks
     at:
       special_time: reboot
       job: "script.sh"


------------Firewall management using Ansible------------
Note: please note that if you add or remove services or ports, the changes might not take effect until you restart the services that rely on those ports (for example, web server services like Apache or Nginx). But for simple rule modifications like rejecting traffic from a specific IP address, the changes should take effect without requiring a full reload of the firewalld configuration.

- name: implement firewalld using ansible 
  hosts: RHEL
  become: yes
  tasks:
    - name: install firewalld package on machine
      package: 
        name: firewalld
        state: present

    - name: start and enable fireewalld
      service:
        name: firewalld
        state: started
        enabled: yes
    
    - name: enable traffic on http
      firewalld:
        service: http
        permanent: true
        state: enabled/disabled/present/absent

    - name: reject traffic from 192.168.15.15 IP address
      firewalld:
        zone: public
        source: 192.168.15.15
        state: present
        action: reject
    
    - name: disable port 22
      firewalld:
        port: 22/tcp
        action: disabled
        immediate: yes					--> use this if dont want to reload firewalld configurations
    
    - name: forward 443 port to 8443
      firewalld:
        rich_rule: rule family=ipv4 forward-port port=443 protocol=tcp to-port=8443
        zone: public
        permanent: true
        state: enabled
        immediate: yes 
    
    - name: reload firewalld confiurations
      systemd:
        name: firewalld
        state: reloaded
        
----selinux policy------------
selinux module change the policy and state of SELinux
- name: show options available for selinux
  selinux: 
    configfile: path/to/config
    policy: targeted
    state: permissive|enforcing|disabled
- name: show options for seboolean
  seboolean: 							--> seboolean module toggle seboolean options
    name: boolean name
    state: no|yes
    persistent: yes|no
- name: show options for sefcontext module			--> manage selinux file context mapping definition
  sefcontext: 
     target: 'path/to/dir(/.*)?'
     setype: selinux_type
     state: present|absent
  command: restorecon -irv /path/to/dir				--> restorecon used to set secutiry context of file to specified values or deafualt 

--------patching using ansible----------------
patches are new lines of code released to fix the existing bugs,introduce new features and improve performance etc
Standard patching procedure:
1. check for patch updates i.e dnf check-update;dnf repolist all
2. check for system downtime with teams
3. raise change request through serviceNow 
4. collect pre-check infor and document them 

#!/bin/bash

echo -e "Date information" >>/home/swami/"pre_patch_$(date+"%d-%m-%Y").txt"
date >>/home/swami/"pre_patch_$(date+"%d-%m-%y").txt" 2>&1

echo -e "Mounted file system" ----
df -hT >>

echo -e "Block ID infor" --
blkid >>
lsblk >>
fdisk -l >>
cat /etc/fstab >>
vdgisplay >>
lvdisplay >>
multipath -ll >>
ifconfig -a >>
free -m >>
uptime >>
cat /etc/grub2.cfg >>
ps -ef >>
top >>
route -n >>

5. take server backup or snapshot
6. co-ordinate with other involed teams to patch.
7. execute above script as post-check and compare results
8. check with teams that apps/d working as expected
9. close change

manually patching:
dnf update <package-name> -y 
dnf downgrade <package-name> -y		--> if want to rollback update for perticular package
dnf history 				--> shows dnf event

dnf history info <ID> 			--> to see detailed info about event you will find ID in dnf history command
dnf history undo <ID>			--> to rollback dnf event

dnf update -y				--> update all packages
reboot


ansible patching:
?
- name: Patching through ansible
  hosts: Middleware
  become: true
  tasks:
   - name: execute pre-checks
     script: /home/swami/precheck.sh
     args:
      - creates: /home/swami/precheck.sh
   - name: update packages
     dnf: 
       name: "*"
       latest: yes
     notify: Reboot machines

   - name: execute post checks
     script: /home/swami/postcheck.sh
     args: 
       - creates: /home/swami/postcheck.sh
   - name: get result file names
     shell: find /home/swami/ -type f -name "*.txt" | cut -d '/' -f2
     register: result
   - name: fetch checks results
     fetch: 
       src: /home/swami/{{ item }}
       dest: /home/swami/
     with_items: "{{ result.stdout_lines }}"
  handlers:   
   - name: reboot machines
     reboot: 
       reboot_timeut: 60


----using dynamic inventory--------------

   