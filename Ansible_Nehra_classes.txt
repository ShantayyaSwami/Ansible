[web]
192.168.1.9
192.168.1.2

[apps]
server1.nehraclasses.local
server2.nehraclasses.local

[weblogic]
server[1:20].mgt.worldpaypp.local

[ohs]
192.168.1.[1:5]

[groups:children]
web
ohs

ansible web --list-hosts -i ~/inventory/ansible_hostfile_example			--> /etc/hosts	: defualt host file used in ansible

vi /etc/ansible/ansible.cfg
[defaults]					--> to make custome inventory file as default
inventory = /home/shantayya/inventory
remote_user = ansible
ask_pass = false
gathering = explicit			--> dont gather the facts. define globally

[privilege_escalation]
become = True
become_method = sudo
become_user = root				--> optional. bcz default become user is root only
become_ask_pass = false

Connection with managed nodes:
1. with password

use -k option to promt for password:
ansible web -m ping -k				--> even after using -k,if commands fails ssh then use hosts_key_checking = false in ansible.cfg file. 

	
2. passwordless
3. define password in inventory
[web]
192.168.1.9	ansible_ssh_user=ansible	ansible_ssh_pass=redhat
192.168.1.2	ansible_ssh_user=jenkins	ansible_ssh_pass=fedora

or
[web:vars]			--> use below username and pass for web group
ansible_ssh_user=ansible
ansible_ssh_pass=redhat	

ad-hoc commands	: used for automating one time jobs
playbooks	: used for repeatative jobs

--------ad-hoc commands----
ansible groupname -m modulename -a "arguments i.e key =  value"

ansiblee-doc -l			--> shows list of ansible modules
ansible-doc modulename		--> to see module details for how to use it.
ansible web -m copy -a "src= dest="						--copy module. use -b(automaticaly takes root user) --become-method sudo remote_src=yes -> to copy fie from one loc to other in remote achine.
										backup= yes --> to backup before copy
Note: yellow color - action performed	green color-idempotency. task already performed in previous executions.  red color- error

ansible web -m command -a "uptime"				--> command module only works if python2.4 or above present in machine + it cannot execute multiple commands
ansible web -m raw -a "uptime;lablk"				--> raw module is used to execute low level commands. can be used as an option to command module.
ansible web -m shell -a "/root/script.sh"			--> shell module used to execute scripts in remote machine.

ansible web -m lineinfile -a 'dest=/root/hello.txt line="Thanks" insertafter=BOF/EOF/specific word from line state=absent'	--> lineinfile used to append content in file
ansible web -m lineinfile -a 'dest=/root/hello.txt regexp=^This state=absent'		--> used to remove liine starting with This

ansible web -m	replace -a 'dest=/root/hello.txt regexp=^Hi replace=hello'		--> used to replace word in file
ansible web -m	user -a 'name=amit state=present/absent id=1010 group=wheel(primary)  groups=wheel(secondary)'		--> add user 
ansible web -m	group -a 'name=rehl state=present/absent gid=1010'				--> add group

---yum/dnf --> fedora distributions  apt--> debian package--> globally used for package management ---------
ansible web -m yum/dnf/apt -a 'name=zsh state=present/installed or absent/remove or latest'  
ansible web -m	package -a 'name=zsh state=present/installed or absent/remove or latest use=dnf/yum/apt'

ansible web -m	yum_repository -a 'name=test description="test repo" enabled=1 gpgcheck=0 baseurl=file:///mnt/AppStream'	--> configure local repo. use state=absent if want to remove repo


systemd: used to manage services and timer on remote machines
ansile rhel9 -m systemd -a 'deamon-reload=true name=httpd state=restarted enabled=false masked=true/false'	--> masking service: symlinc moved to /dev/null) means sending servive in un-unsed state permanently until we unmask restarted : shutdown plus start again reload: only reloads its configuraton 

Note: systemctl enable/disable --now httpd	--> start/stop plus enable/disable service at same time. 

debug: used to print messages in system
ansible rhel9 -m debug -a 'msg=Hello Shantayya'

uri: used to validate urls
ansible web -m uri -a 'url=www.google.com'

ansible-galaxy collection install ansible.posix			--> install extra modules
ansible-galaxy collection install community.general		--> install parted ansible module from community collection 

parted: used to perform block device cnfiguraton
ansibe web -m parted -a 'device=/dev/sdb number=1 part_end=10GiB state=present/absent'
		parted -a 'device=/dev/sdb number=2/3/4 part_start=10GiB part_end=15GiB part_type=extended state=present'

filesystem: usd to creat fs on partition
ansible web -m filesystem a 'device=/dev/sdb fstype=xfs'

lvg: used to create,remove volume groups
ansible web -m lvg -a 'pvs=/dev/sdb2 vg=VolGrp state=present'
 		lvg -a 'vg=VolGrp state=absent'

lvol: used to create,remove logical volumes.
ansible web -m lvol -a 'vg=VolGrp lv=LogVol1 size=4G state=present'		--> use +2G to extend volume with 2GB size=100%free to use remaining full space
ansible web -m lvol -a 'vg=VolGrp lv=LogVol1 state=absent force=true'		--> to remove lvm

ansible web -m filesystem -a 'device=/dev/VolGrp/LogVol1 fstype=ext4'		--> format fs

ansible web -m mount -a 'path=/path src=/dev/VolGrp/LogVol1 fstype=ext4 opts=default state=mounted'	--> mount fs. state=mounted makes entry in fstab also

cron: used to schedule cron jobs
ansible web -m cron -a 'name=test weekday=1 user=root min=48 hour=22 job="echo Hello Shantayya>/var/log/messages"'


----variables-----
- hosts: web
  tasks: 
  - name: print message
    debug: 
      msg: "{{ iinvetory_hostname }}"			---> print system defined variable


- hosts: RHEL
  vars: 
    salutatins: Hello Everyone				--> user defined variables
  tasks: 
  - name: print user defined variables
    debug: 
      msg: "{{ salutations }}"

 
----ansible variable types---
1. string type: defined in one line. [skills: http]
2. list/array type: 
	var:
	 - http
       - weblogic
       - ansible
3. dictionary type:
	skills:
      - web: http
        app: weblogic
        middleware: oracle

- name: install httpd and deploy index.html
  hosts: RHEL						
  become: true
  vars: 						or	vars_files:						--> to import var from file
    apache: httpd						    - /home/shantayya/myvars.yaml	
    apache_root: /var/www/html
  tasks:
    - name: install httpd
      yum: 
        name: httpd
        state: installed
    - name: enable httpd service
      service: 
        name: "{{ apache }}"
        state: started
        enabled: true
    - name: create apache root directort "{{ apache }}"
      file:
        name: "{{ apache_root }}"
        state: directory
    - name: copy index.html
      copy:
        content: "Hello, Welcome to Swami and Sons"
        dest: "{{ apache_root }}/index.html"



- name: install linux packages
  hosts: RHEL
  become: true
  vars:
    myvars:
     - ftp
     - httpd
     - vsftpd
  tasks:
   - name: install apckages
     yum:  
      name: "{{ myvars }}"					--> "{{ myvars[2] }}" using array to install vsftpd package only
      state: installed


- name: create users using loop
  become: true
  gather_facts: false						--> dont gather facts. 
  hosts: RHEL
  - name: creatin users
    user: 
      name: "{{ item.name }}"					--> using variables through loop
      uid: "{{ item.uid }}"				
      state: present
    loop:
      - nmae: shantayya
        uid: 1020
      - name: Shankar
        uid: 1030
      - name: Somnath
        uid: 1040


- name: promt for user
  hosts: RHEL
  vars_prompt:								--> using vars_prompt t accept user input
     - name: user_name
       prompt: Enter user name:
       private: no
     - name: password
       prompt: Enter password:
       private: yes
  tasks:
     - debug:
        msg:" User name is {{ user_name }} and password is {{ password }}"



----Facts------------
Anible facts are syste properties collection by ansible when playooks are executed on remote machine. 
ansible all -m setup 

magic variable: these system defined variables, like hostvars,groups_vars,groups etc

----Vault--------
ansible vault is a feature which allows you to encrypt the sensitive information like passwords or keys
ansible-vault encrypt/edit/view/decrypt sample.yml		--> encrypt existing file
ansible-playbook sample.yml --ask-vault-pass		---> execute yml file using vault password

ansible-playbbook sample.yml --vault-password-file	--> you can put password in separate file(place file at location only known to you.) which can be provided an input for vault password

ansibe-vault create password.yml				---> apply encryption on fie while creating it.
pw: redhat

hosts: node2
vars:
  - /home/ansible/password.yml
tasks:
 - name: create user with password
   user:
     name: shantayya
     pass: "{{ pw }}"

ansible-playbook sample.yml --ask-vault-pass		--> provide password of password.yml encrypted file


ansible-vault rekey /home/ansible/password.yml		--> change encrypted file password


----Loop-----
loop,with_items used for executing loop statements in ansible. until keyword used with condition
ansible-doc -t lookup -l	--> shows list of keyworss used in lookup
hosts: RHEL
tasks:
 - name: create user
   user:
     name: "{{ item }}"
     state: present
   with_items/loops:
     - shantayya
     - somnath
     - shankar

--use hashed in loop----
- name: create users using loop
  become: true
  hosts: RHEL
  - name: creatin users
    user: 
      name: "{{ item.name }}"					--> using variables through loop
      groups: "{{ item.groups }}"				
      state: present
    loop:
      - { name: 'shantayya', groups: wheel }
      - { name: 'shankar', groups: root }
      - { name: 'Somnath', groups: rhel }
 

--when: used for condition----
hosts: RHEL
tasks:
 - name: print on redhat machine
   shell: echo "Hello This is redhat machine"
   when: ansible_distribution == 'Redhat
 
 - name: print on ubuntu macine
   shell: echo "Hello this is ubantu machine"
   when: ansible_distribution == 'Ubantu'


hosts: RHEL
tasks:
 - name: execute loop based on condition
   command: echo {{ item }}
   loop: [0,2,4,6,8,10]
   when: item > 5